class En:
    def __init__(self, attribute, value):
        self.attribute = attribute
        self.value = value

    def messages(self):
        return {
            "field": "The {0} is not exist".format(self.attribute),
            "required": "The {0} field is required.".format(self.attribute),
            "required_if": "The {0} field is required when {1} is exist.".format(self.attribute, self.value),
            "required_unless": "The {0} field is required unless {1} is not exist or empty.".format(self.attribute, self.value),
            "required_with": "The {0} field is required when {1} is/are present.".format(self.attribute, self.value),
            "required_without": "The {0} field is required when {1} is/are not present.".format(self.attribute, self.value),
            "accepted": "The {0} must be accepted.".format(self.attribute),
            "alpha": "The {0} may only contain letters.".format(self.attribute),
            "boolean": "The {0} may only boolean value : true , false , 1 or 0.".format(self.attribute),
            "string": "The {0} may only string.".format(self.attribute),
            "start_with": "The {0} may only start with {1}.".format(self.attribute, self.value),
            "end_with": "The {0} may only end with {1}.".format(self.attribute, self.value),
            "numeric": "The {0} must be a number.".format(self.attribute),
            "digits": "The {0} must be {1} digits.".format(self.attribute, self.value),
            "max": "The {0} may not be greater than {1}.".format(self.attribute, self.value),
            "min": "The {0} must be at least {1}.".format(self.attribute, self.value),
            "email": "The {0} must be a valid email address.".format(self.attribute),
            "url": "The {0}  must be a valid URL address.".format(self.attribute),
            "ip": "The {0} must be a valid IP address.".format(self.attribute),
            "ipv4": "The {0} must be a valid IPv4 address.".format(self.attribute),
            "ipv6": "The {0} must be a valid IPv6 address.".format(self.attribute),
            "in": "The selected {0} is invalid.".format(self.attribute),
            "not_in": "The selected {0} is invalid.".format(self.attribute),
            "uuid": "The {0} must be a valid UUID.".format(self.attribute),
            "date": "The {0} is not a valid date.".format(self.attribute),
            "time": "The {0} is not a valid time.".format(self.attribute),
            "datetime": "The {0} is not a valid datetime.".format(self.attribute),
            "timezone": "The {0} is not a valid Timezone.".format(self.attribute),
            "date_equals": "The {0} must be a date equal to {1}.".format(self.attribute, self.value),
            "after": "The {0} must be a date after to {1}.".format(self.attribute, self.value),
            "after_or_equal": "The {0} must be a date after or equal to {1}.".format(self.attribute, self.value),
            "before": "The {0} must be a date before to {1}.".format(self.attribute, self.value),
            "before_or_equal": "The {0} must be a date before or equal to {1}.".format(self.attribute, self.value),
            "different": "The {0} must be different to {1}.".format(self.attribute, self.value),
            "equal": "The {0} must be equal to {1}.".format(self.attribute, self.value),
            "gt": "The {0} must be greater than {1}.".format(self.attribute, self.value),
            "gte": "The {0} must be greater or equal to {1}.".format(self.attribute, self.value),
            "lt": "The {0} must be less than {1}.".format(self.attribute, self.value),
            "lte": "The {0} must be less or equal to {1}.".format(self.attribute, self.value),
            "confirmed": "The {0} confirmation does not match.".format(self.attribute),
            "nullable": "The {0} can be a null.".format(self.attribute),
            "file": "The {0} must be a file.".format(self.attribute),
            "mimes": "The {0} must be a file of type: {1}.".format(self.attribute, self.value),
            "mime_types": "The {0} must be a file of type: {1}.".format(self.attribute, self.value),
            "max_size": "The {0} may not be greater than {1} kilobytes.".format(self.attribute, self.value),
            "min_size": "The {0}  must be at least {1} kilobytes.".format(self.attribute, self.value),
        }
